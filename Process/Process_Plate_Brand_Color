from PyQt5 import QtCore
import time
import cv2
from Yolov5.detect_yolov5 import Detection
from Polygon.Polygon import detect_zone, plate_zone


class ThreadTracking(QtCore.QThread):

    def __init__(self, queue_tracking_for_plate, queue_plate_brand_color):
        super().__init__()
        self.__thread_active = False

        # queue
        self.queue_tracking_for_plate = queue_tracking_for_plate
        self.queue_plate_brand_color = queue_plate_brand_color

        # tracking
        self.plate_detection = Detection()
        self.brand_detection = Detection()
        self.setup_plate_detection()
        self.setup_brand_detection()

    def setup_plate_detection(self):
        weights = "Weight/lp_final.pt"
        classes = [0]
        conf = 0.6
        imgsz = 256
        device = "cpu"
        self.tracking.setup_model(weights, classes, conf, imgsz, device)

    def setup_brand_detection(self):
        weights = "Weight/brand.pt"
        classes = None
        conf = 0.5
        imgsz = 640
        device = "cpu"
        self.tracking.setup_model(weights, classes, conf, imgsz, device)

    def is_in_plate_zone(self, box):
        pass

    def run(self):
        self.__thread_active = True
        print('Starting Tracking Thread...')
        while self.__thread_active:
            if self.queue_tracking_for_plate.qsize() > 0:
                frame, id_dict = self.queue_tracking_for_plate.get()
            QtCore.QThread.msleep(1)

    def stop(self):
        print('Stopping Capture Thread')
        self.__thread_active = False
        self.cap.release()
